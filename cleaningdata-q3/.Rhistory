x <- 9
ls()
dir()
?list.files()
?list.files
args(list.files())
args(list.files
)
old.dir <- getwd()
setwd('/home/hmallah/coursera/da-jh')
dir()
old.dir <- getwd()
dir.create("testdir")
setwd('testdir')
file.create(mytest.R)
file.create('mytest.R')
dir()
file.exists('mytest.R')
file.info('mytest.R')
file.rename('mytest.R', 'mytest2.R')
file.copy('mytest2.R', 'mytest3.R')
file.path('mytest3.R')
file.path('mytest3.R', 'folder1', 'folder2')
file.path(folder1', 'folder2')
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path('testdir2', 'testdir3'))
dir.create(file.path(dir.create('testdir2'), 'testdir3'))
dir.create(file.path('testdir2', 'testdir3'), recursive=T)
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:!
;
15:1
?`:`
seq(1, 10)
seq(1, 20)
seq(1, 20, by=0.5)
seq(1, 10, by=0.5)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.55, 55, -10, 6)
num_vect <- c(0.55, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Hicham")
my_name
paste(my_name, " ")
paste(my_name, collapse=" ")
paste("Hello", "World!", sep=" ")
paste("Hello", "orld!", sep=" ")
paste("Hello", "world!", sep=" ")
sep(c(1:3), c("X", "Y", "Z"), sep="")
paste(c(1:3), c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
swirl()
library('swirl')
swirl()
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>9]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:2-
;
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)
<- c(4,5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
exit
quit
quit()
z = 123;
t <- function(x, y){
x*y/z
}
t(123, 1)
makeCacheMatrix <- function(x = matrix()){
inverse <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...){
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
my_matrix <- makeCacheMatrix(matrix(rnorm(9), 3, 3))
my_matrix$get()
cacheSolve(my_matrix)
my_matrix$getinverse()
x$getinverse()
my_matrix$getinverse()
makeCacheMatrix <- function(x = matrix()){
inverse <- NULL
set <- function(y){
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inv) inverse <<- inv
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
my_matrix <- makeCacheMatrix(matrix(rnorm(9), 3, 3))
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$getinverse()
makeCacheMatrix <- function(x = matrix()){
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
my_matrix <- makeCacheMatrix(matrix(rnorm(9), 3, 3))
my_matrix$getinverse()
library('swirl')
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
mydf <- read.csv(path2csv, stringAsFactors=FALSE)
mydf <- read.csv(path2csv, stringSAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
exists()
swirl()
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -(X:size))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<"3.0.2", country=="IN")
filter(cran, r_version <= "3.0.2", country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran, size > 100500 & r_os == "linux=gnu")
filter(cran, size > 100500, r_os == "linux=gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package, mean(size))
submit()
submit()
pack_sum(by_package)
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count>=679)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, 99%)
quantile(pack_sum$unique, prob=0.99)
top_unique <- filter(pack_sum, unique > 465)
View(pack_sum)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
setwd("coursera/da-ja/datasciencecoursera")
setwd("coursera/da-jh/datasciencecoursera")
dir
dir()
setwd("cleaningdata-q3/")
dir()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "ss.csv")
df
df <- read.csv("ss.csv")
df[df$ACR > 10000]
df[df$ACR > 10000, ]
which(df[df$ACR > 10000])
which(df[df$ACR > 10000,])
which(df$ACR > 10000)
?which
which((df$ACR > 10000))
(df$ACR > 10000)
which(df$ACR > 10000)
which(df$ACR > '10000')
which(df$ACR == 3)
which(df$ACR == 3 & df$AGS > 10000)
which(df$ACR == 3 & df$AGS == 6)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "jeff.jpg")
library(jpeg)
library(jpg)
installed.packages(jpeg)
installed.packages('jpeg')
installed.packages('jpg')
install.packages("jpeg")
library(jpeg)
img <- readJPEG('jeff.jpg')
quantile(img)
quantile(img, c(0.3, 0.8))
quantile(img, c(0.3, 0.8), native=TRUE)
?quantile
img <- readJPEG('jeff.jpg', native = TRUE)
quantile(img, c(0.3, 0.8))
v
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "gdp.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "fedstats.csv")
gdp <- read.csv('gdp.csv')
fedstats <- read.csv('fedstats.csv')
?merge
merged <- merge(gdp, fedstats, by.x = country)
merged <- merge(gdp, fedstats, by.x = "country")
head(gdp)
head(fedstats)
merged <- merge(gdp, fedstats, by.x = "X", by.y="CountryCode")
head(merged)
dim(merged)
colnames(gdp)
gdp
fedstats
merged <- merge(gdp, fedstats, by.x = "X.2", by.y="Short.Name")
dim(merged)
merged <- merge(gdp, fedstats, by.x = "X", by.y="CountryCode")
dim(merged)
?sort
?order
merged
colnames(merged)
order(merged, 'Gross.domestic.product.2012', decreasing = TRUE)
library(dplyr)
source('~/.active-rstudio-document')
arrange(merged, desc(Gross.domestic.product.2012))
merged_ordered= arrange(merged, desc(Gross.domestic.product.2012))
tail(merged_ordered)
merged <- merge(gdp, fedstats, by.x = "X.2", by.y="Short.Name")
merged_ordered= arrange(merged, desc(Gross.domestic.product.2012))
tail(merged_ordered)
colnames(merged)
gdp
gdp$Gross.domestic.product.2012
merged_ordered= arrange(merged, desc(Gross.domestic.product.2012))
merged_ordered
gdp <- read.csv('gdp.csv', skip=4)
gdp
fedstats
tail(gdp)
fedstats
fedstats <- read.csv('fedstats.csv', skip=32)
fedstats
fedstats <- read.csv('fedstats.csv', skip=32)
fedstats
fedstats <- read.csv('fedstats.csv')
fedstats
merged <- merge(gdp, fedstats, by.x = "X", by.y="CountryCode")
merged
dim(merged)
merged <- merge(gdp, fedstats, by.x = "X.2", by.y="Short.Name")
merged
gdp
merged <- merge(gdp, fedstats, by.x = "X.3", by.y="Short.Name")
merged
dim(merged)
merged_ordered= arrange(merged, desc(X.3))
tail(mereged_ordered)
tail(merged_ordered)
merged_ordered= arrange(merged, desc(X.1))
tail(merged_ordered)
merged
gdp
merged <- merge(gdp, fedstats, by.x = "X", by.y="CountryCode")
merged
gdp
arrange
?arrange
merged_ordered <- merged[order(merged$X.1, n.last=FALSE, decreasing = TRUE)]
merged_ordered <- merged[order(merged$X.1, n.last=FALSE, decreasing = TRUE)]
merged_ordered= arrange(!is.na(merged), desc(X.1))
merged_ordered= arrange(merged, desc(X.1))
head(merged_ordered)
head(merged_ordered, n=13)
mutate(merged, X.1 = as.integer(X.1))
merged <- mutate(merged, X.1 = as.integer(X.1))
merged_ordered= arrange(merged, desc(X.1))
head(merged_ordered, n=13)
tail(merged)
tail(merged_ordered, n=13)
tail(merged_ordered, n=20)
tail(merged_ordered, n=13)
head(merged_ordered, n=13)
head(merged_ordered, n=50)
View(merged_ordered)
gdp
View(gdp)
View(arrange(gdp, desc(X.1)))
gdp <- gdp[(1:n-4), ]
gdp <- gdp[(1:n()-4), ]
gdp <- gdp[(1:n-4), ]
gdp
View(arrange(gdp, desc(X.1)))
gdp<-arrange(gdp, desc(X.1))
dim(gdp)
gdp <- gdp[(1:322), ]
View(gdp)
dim(gdp)
gdp <- read.csv('gdp.csv', skip=4)
View(gdp)
gdp<-arrange(gdp, desc(X.1))
gdp <- gdp[(5:322), ]
gdp <- read.csv('gdp.csv', skip=4)
gdp<-arrange(gdp, desc(X.1))
gdp <- gdp[(5:326), ]
gdp$X
fedstats$CountryCode
merged <- merge(gdp, fedstats, by.x = "X", by.y="CountryCode")
dim(merged)
merged_ordered= arrange(merged, desc(X.1))
tail(merged_ordered, n=13)
dim(gdp)
gdp <- read.csv('gdp.csv', skip=4)
gdp <- mutate(gdp, X.1 = as.integer(X.1))
gdp<-arrange(gdp, desc(X.1))
gdp <- gdp[(5:326), ]
fedstats <- read.csv('fedstats.csv')
merged <- merge(gdp, fedstats, by.x = "X", by.y="CountryCode")
merged_ordered= arrange(merged, desc(X.1))
View(merged_ordered)
dim(gdp)
head(gdp)
gdp <- read.csv('gdp.csv', skip=3, nrows=191)
view(gdp)
View(gdp)
gdp <- gdp[(2:),]
gdp <- gdp[2:,]
gdp <- gdp[c(2:),]
gdp <- gdp[c(2:191),]
gdp <- mutate(gdp, Ranking = as.integer(Ranking))
class(gdp$Ranking)
gdp<-arrange(gdp, desc(ranking))
gdp<-arrange(gdp, desc(Ranking))
fedstats <- read.csv('fedstats.csv')
merged <- merge(gdp, fedstats, by.x = "X", by.y="CountryCode")
dim(merged)
merged_sorted <- arrange(merged, desc(Ranking))
View(merged_sorted)
rm("merged_ordered")
mean(merged_sorted$Ranking)
mean(merged_sorted[Income.Group == 'High income: OECD']$Ranking)
merged_sorted[merge_sorted$Income.Group == 'High income: OECD']
merged_sorted[merged_sorted$Income.Group == 'High income: OECD']
merged_sorted[merged_sorted$Income.Group == 'High income: OECD',]
mean(merged_sorted[merged_sorted$Income.Group == 'High income: OECD']$Ranking)
mean(merged_sorted[merged_sorted$Income.Group == 'High income: OECD', Ranking])
merged_sorted[merged_sorted$Income.Group == 'High income: OECD', Ranking]
merged_sorted[merged_sorted$Income.Group == 'High income: OECD',]
merged_sorted[merged_sorted$Income.Group == 'High income: OECD', Ranking]
merged_sorted_grouped <- group_by(merged_sorted, Income.Group)
summarise(merged_sorted_grouped, mean)
?summarise
summarise(merged_sorted_grouped, mean())
summarise(merged_sorted_grouped, mean(Ranking))
library(hmisc)
library(Hmisc)
install.packages(Hmisc)
install.packages('Hmisc')
library(Hmisc)
?cut2
cut2(merged_sorted$Ranking, 5)
cut2(merged_sorted$Ranking, g=5)
mutate(merged_sorted, RankingCuts = cut2(merged_sorted$Ranking, g=5))
merged_sorted <- mutate(merged_sorted, RankingCuts = cut2(merged_sorted$Ranking, g=5))
View(merged_sorted)
filter(merged_sorted, RankingCuts == [1, 39)
filter(merged_sorted, RankingCuts == '[1, 39)')
filter(merged_sorted, RankingCuts == [1, 39))
filter(merged_sorted, Income.Group = 'Lower middle income')
filter(merged_sorted, Income.Group == 'Lower middle income')
dim(filter(merged_sorted, Income.Group == 'Lower middle income'))
dim(filter(merged_sorted, Income.Group == 'Lower middle income', RankingCuts == [ 1, 39)))
class(merged_sorted$RankingCuts)
dim(filter(merged_sorted, Income.Group == 'Lower middle income', RankingCuts == "[ 1, 39)"))
dim(filter(merged_sorted, Income.Group == 'Lower middle income', RankingCuts == "[ 1, 39)"))
dim(filter(merged_sorted, Income.Group == 'Lower middle income', RankingCuts == [1, 39)))
dim(filter(merged_sorted, Income.Group == 'Lower middle income', RankingCuts in c(1:39)))
dim(filter(merged_sorted, Income.Group == 'Lower middle income', Ranking in c(1:39)))
dim(filter(merged_sorted, Income.Group == 'Lower middle income', Ranking %in% c(1:39)))
dim(filter(merged_sorted, Income.Group == 'Lower middle income', Ranking %in% c(1:38)))
