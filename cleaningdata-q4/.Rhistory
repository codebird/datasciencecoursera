install.packages(kernsmooth)
install.packages(KernSmooth)
install.packages('KernSmooth')
library(KernSmooth)
install.packages("swirl")
packageVersion("swirl")
install.packages("swirl")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl
swirl()
5 + 7
X <- 5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
z, 555, z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files()
?list.files
args(list.files())
args(list.files
)
old.dir <- getwd()
setwd('/home/hmallah/coursera/da-jh')
dir()
old.dir <- getwd()
dir.create("testdir")
setwd('testdir')
file.create(mytest.R)
file.create('mytest.R')
dir()
file.exists('mytest.R')
file.info('mytest.R')
file.rename('mytest.R', 'mytest2.R')
file.copy('mytest2.R', 'mytest3.R')
file.path('mytest3.R')
file.path('mytest3.R', 'folder1', 'folder2')
file.path(folder1', 'folder2')
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path('testdir2', 'testdir3'))
dir.create(file.path(dir.create('testdir2'), 'testdir3'))
dir.create(file.path('testdir2', 'testdir3'), recursive=T)
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:!
;
15:1
?`:`
seq(1, 10)
seq(1, 20)
seq(1, 20, by=0.5)
seq(1, 10, by=0.5)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.55, 55, -10, 6)
num_vect <- c(0.55, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Hicham")
my_name
paste(my_name, " ")
paste(my_name, collapse=" ")
paste("Hello", "World!", sep=" ")
paste("Hello", "orld!", sep=" ")
paste("Hello", "world!", sep=" ")
sep(c(1:3), c("X", "Y", "Z"), sep="")
paste(c(1:3), c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
swirl()
library('swirl')
swirl()
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>9]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:2-
;
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)
<- c(4,5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
exit
quit
quit()
z = 123;
t <- function(x, y){
x*y/z
}
t(123, 1)
makeCacheMatrix <- function(x = matrix()){
inverse <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...){
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
my_matrix <- makeCacheMatrix(matrix(rnorm(9), 3, 3))
my_matrix$get()
cacheSolve(my_matrix)
my_matrix$getinverse()
x$getinverse()
my_matrix$getinverse()
makeCacheMatrix <- function(x = matrix()){
inverse <- NULL
set <- function(y){
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inv) inverse <<- inv
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
my_matrix <- makeCacheMatrix(matrix(rnorm(9), 3, 3))
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$getinverse()
makeCacheMatrix <- function(x = matrix()){
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
my_matrix <- makeCacheMatrix(matrix(rnorm(9), 3, 3))
my_matrix$getinverse()
library('swirl')
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
mydf <- read.csv(path2csv, stringAsFactors=FALSE)
mydf <- read.csv(path2csv, stringSAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
exists()
swirl()
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -(X:size))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<"3.0.2", country=="IN")
filter(cran, r_version <= "3.0.2", country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran, size > 100500 & r_os == "linux=gnu")
filter(cran, size > 100500, r_os == "linux=gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package, mean(size))
submit()
submit()
pack_sum(by_package)
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count>=679)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, 99%)
quantile(pack_sum$unique, prob=0.99)
top_unique <- filter(pack_sum, unique > 465)
View(pack_sum)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy("25081985\")
dmy("25081985")
dmy(25081985)
dmy("192012")
ymd("192012")
ymd("1920-1-2")
dt``
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 17, minutes = 39, seconds = 56)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = hours + 17, minutes = minutes + 34)
depart <- update(depart, hours = hour(depart) + 17, minutes = minute(depart) + 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz
with_tz(arrive, "Asia/Beirut")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(arrive, last_time)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("coursera/da-jh/datasciencecoursera/")
dir()
dir.create('cleaningdata-q4/')
setwd('cleaningdata-q4/')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', destfile = 'ss.csv')
df <- read.csv('ss.csv')
strpslit(names(df), 'wgtp')
strsplit(names(df), 'wgtp')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv', destfile = 'gdp.csv')
gdp<- read.csv('gdp.csv')
gdp
gdp
gdp<- read.csv('gdp.csv', skip=4, nrows = 191)
gdp
View(gdp)
gdp <- read.csv('gdp.csv', skip=3, nrows=191)
View(gdp)
gdp <- gdp[c(2:191),]
View(gdp)
library(dplur)
library(dplyr)
mutate(gdp, US.dollars. = gsub(',', '', US.dollars.)
)
gdp <- mutate(gdp, US.dollars. = as.integer(gsub(',', '', US.dollars.)))
View(gdp)
mean(gdp$US.dollars.)
grep("^United",gdp$Economy), 4
grep("^United",gdp$Economy)
grep("^United",gdp$Economy)[4]
grep("^United",gdp$Economy)[3]
grep("^United",gdp$Economy)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "fedstats.csv")
fedstats <- read.csv('fedstats.csv')
merged <- merge(gdp, fedstats, by.x = "X", by.y="CountryCode")
view(merged)
View(merged)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "fedstats.csv")
fedstats <- read.csv('fedstats.csv')
merged <- merge(gdp, fedstats, by.x = "X", by.y="CountryCode")
merged$Special.Notes
grep('^Fiscal year end: June', merged$Special.Notes)
grep('^Fiscal year end: [Jj]une', merged$Special.Notes)
grep('^[Ff]iscal year end: [Jj]une', merged$Special.Notes)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
class(sampleTimes[1])
len(year(sampleTimes) ==2012)
length(year(sampleTimes) ==2012)
library(lubridate)
length(year(sampleTimes) ==2012)
year(sampleTimes)
year(sampleTimes) == 2012
class(year(sampleTimes))
year(sampleTimes)
tail(year(sampleTimes))
length(sampleTimes)
sum(year(sampleTimes) == 2012)
sum(wday(sampleTimes, label = TRUE) == 'Monday')
wday(sampleTimes, label = TRUE)
sum(wday(sampleTimes, label = TRUE) == 'Mon')
sum(wday(sampleTimes, label = TRUE) == 'Mon' & sum(year(sampleTimes) == 2012))
sum(wday(sampleTimes, label = TRUE) == 'Mon' & year(sampleTimes) == 2012)
clear()
