file.path('mytest3.R', 'folder1', 'folder2')
file.path(folder1', 'folder2')
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path('testdir2', 'testdir3'))
dir.create(file.path(dir.create('testdir2'), 'testdir3'))
dir.create(file.path('testdir2', 'testdir3'), recursive=T)
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:!
;
15:1
?`:`
seq(1, 10)
seq(1, 20)
seq(1, 20, by=0.5)
seq(1, 10, by=0.5)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.55, 55, -10, 6)
num_vect <- c(0.55, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Hicham")
my_name
paste(my_name, " ")
paste(my_name, collapse=" ")
paste("Hello", "World!", sep=" ")
paste("Hello", "orld!", sep=" ")
paste("Hello", "world!", sep=" ")
sep(c(1:3), c("X", "Y", "Z"), sep="")
paste(c(1:3), c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
swirl()
library('swirl')
swirl()
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>9]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:2-
;
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)
<- c(4,5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
exit
quit
quit()
z = 123;
t <- function(x, y){
x*y/z
}
t(123, 1)
makeCacheMatrix <- function(x = matrix()){
inverse <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...){
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
my_matrix <- makeCacheMatrix(matrix(rnorm(9), 3, 3))
my_matrix$get()
cacheSolve(my_matrix)
my_matrix$getinverse()
x$getinverse()
my_matrix$getinverse()
makeCacheMatrix <- function(x = matrix()){
inverse <- NULL
set <- function(y){
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inv) inverse <<- inv
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
my_matrix <- makeCacheMatrix(matrix(rnorm(9), 3, 3))
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$getinverse()
makeCacheMatrix <- function(x = matrix()){
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
my_matrix <- makeCacheMatrix(matrix(rnorm(9), 3, 3))
my_matrix$getinverse()
library('swirl')
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
mydf <- read.csv(path2csv, stringAsFactors=FALSE)
mydf <- read.csv(path2csv, stringSAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
exists()
swirl()
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -(X:size))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<"3.0.2", country=="IN")
filter(cran, r_version <= "3.0.2", country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran, size > 100500 & r_os == "linux=gnu")
filter(cran, size > 100500, r_os == "linux=gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package, mean(size))
submit()
submit()
pack_sum(by_package)
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count>=679)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, 99%)
quantile(pack_sum$unique, prob=0.99)
top_unique <- filter(pack_sum, unique > 465)
View(pack_sum)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
swirl()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col=sex_class, into = c("sex", class))
separate(data=res, col=sex_class, into = c("sex", "class"))
submit()
students3
?gather
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number('class5')
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class, class=parse_number(class))
print
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class, parse_number(class)) %>%
print
submit()
students4
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status, 'passed')
passed <- mutate(passed, status='passed')
passed <- mutate(failed, status='failed')
passed <- mutate(passed, status='passed')
failed <- mutate(failed, status='failed')
bind_rows(passed, failed)
sat
?gather
submit()
?separate
submit()
submit()
submit()
getwd
getwd()
setwd("coursera/da-ja/datasciencecourse")
setwd("coursera/da-jh/datasciencecoursera")
dir.create('cleaningdata-q1')
setwd("clearningdata-q1")
setwd("cleaningdata-q1")
dir
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="idaho-housing.csv")
library('data.table')
data.table('idaho-housing.csv')
data <- data.table('idaho-housing.csv')
data
?data.table
data <- data.frame(read.csv('idaho-housing.csv'))
data
data <- data.table(data)
data
data[VAL>1000000]
data[VAL >= 1000000]
data[VAL >= '1000000']
data[VAL >= '1000000'].count()
length(data[VAL >= '1000000'])
data[VAL >= '1000000']$VAL
data$VAL = as.integer(data$VAL)
data[VAL >= 1000000]$VAL
data[VAL >= 1000000]
data[VAL >= '1000000']
nrow(data[VAL >= '1000000'])
nrow(data[VAL >= '1000000', !is.na(VAL)])
nrow(data[VAL >= '1000000' & !is.na(VAL)])
data[VAL >= '1000000']
data[VAL >= '1000000']$VAL
data$VAL = as.numeric(data$VAL)
data[VAL >= '1000000']$VAL
mutate(data, VAL, VAL=as.numeric(VAL))
data[VAL >= '1000000']$VAL
data[VAL >= 1000000]$VAL
class(data$VLA)
class(data$VAL)
data$VAL
nrow(data[VAL == 24])
nrow(data[VAL == 24 & !is.na(VAL)])
data$FES
head(data)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx', destfile="natural-gaz-acquisition.xlsx")
?read.xlsx
install.packages('xlsx')
install.packages('xlsx')
install.packages('xlsx')
install.packages('xlsx')
dat <- read.xlsx('natural-gaz-acquisition.xlsx', rows=18:23, cols=7:15)
library(xlsx)
dat <- read.xlsx('natural-gaz-acquisition.xlsx', rows=18:23, cols=7:15)
dat <- read.xlsx('natural-gaz-acquisition.xlsx', sheet=1 rows=18:23, cols=7:15)
dat <- read.xlsx('natural-gaz-acquisition.xlsx', sheet=1, rows=18:23, cols=7:15)
dat <- read.xlsx('natural-gaz-acquisition.xlsx', sheetIndex = 1, rows=18:23, cols=7:15)
?read.xlsx
dat <- read.xlsx('natural-gaz-acquisition.xlsx', sheetIndex = 1, startRow = 18, endRow = 23, colIndex =7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages('xml')
install.packages('XML')
install.packages('XML')
library(XML)
data <- xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="restaurants.xml")
data <- xmlParse("restaurants.xml")
data
xml_data <- xmlToList(data)
xml_data
xml_data$row$row$zipcode==21231
xml_data[xml_data$row$row$zipcode==21231]
print(xml_data[xml_data$row$row$zipcode==21231])
xml_data$row$row$zipcode
rm(xml_data)
data
xmlRoot(data)
xmltop <- xmlRoot(data)
class(xmltop)
xmlName(xmltop)
xmlName(xmltop[[1]])
xmltop[[1]]
xmltop[[2]]
xmltop[[1][1]]
xmltop[[1]][[1]]
xmltop[[1]][[1][2]]
xmltop[[1]][[1]][[2]]
xmltop[[1]][[2]][[2]]
xmltop[[1]][[3]][[2]]
length(xmltop[[1]])
xmltop[[1]][[4]][[2]]
xmltop[[1]][[100]][[2]]
xmltop[[1]]
nrow(xmltop[[1]])
ncol(xmltop[[1]])
xmltop[[1]]
for(row in xmltop[[1]])
{}
for(row in xmltop[[1]]){}
for(row in xmltop[[1]]){
print(row); }
for(row %in% xmltop[[1]]){
xmltop[[1]]
xmltop[[1]][[100]][[2]]
xpathSApply(xtop, '//zipcode', xmlValue)
xpathSApply(xmltop, '//zipcode', xmlValue)
xpathSApply(xmltop, '//zipcode', function() { sum(xmlValue==21231)})
xpathSApply(xmltop, '//zipcode', function { sum(xmlValue==21231)})
xpathSApply(xmltop, '//zipcode',  sum(xmlValue==21231))
res <- xpathSApply(xmltop, '//zipcode',  sum(xmlValue==21231))
res <- xpathSApply(xtop, '//zipcode', xmlValue)
res <- xpathSApply(xmltop, '//zipcode', xmlValue)
res
res[0]
res[[0]]
res[0,]
res[0]
print(res[0])
res
class(res)
res[1]
count(res == 21231)
res == 21231
res == "21231"
sum(res == "21231")
dat
data <- data.frame(read.csv('idaho-housing.csv'))
nrow(data[VAL == 24 & !is.na(VAL)])
data$VAL
data.table(data)
nrow(data[VAL == 24 & !is.na(VAL)])
data[VAL]
data$VAL
colnames(data)
data['VAL']
data['VAL'==24]
nrow(data[VAL == 24 & !is.na(VAL)])
class(Data)
class(data)
data <- data.table(data)
nrow(data[VAL == 24 & !is.na(VAL)])
mean(DT$pwgtp15,by=DT$SEX)
mean(data$pwgtp15,by=data$SEX)
tapply(data$pwgtp15,data$SEX,mean)
data(pwgtp)
data$pwgtp
data['pwgtp15']
data[pwgtp15]
colnames(data)
tapply(data$wgtp15,data$SEX,mean)
mean(data$wgtp15,by=data$SEX)
data[,mean(pwgtp15),by=SEX]
mean(data$wgtp15,by=data$SEX)
data$SEX
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', destfile="fss06pid.csv")
DT <- read.csv('fss06pid.csv')
DT
head(DT)
DT$SEX
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
ptm <- proc.time()
proc.time() - ptm
ptm <- proc.time();time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15));proc.time() - ptm;
ptm <- proc.time(); mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15);proc.time() - ptm;
ptm <- proc.time(); tapply(DT$pwgtp15,DT$SEX,mean);proc.time() - ptm;
ptm <- proc.time(); sapply(split(DT$pwgtp15,DT$SEX),mean);proc.time() - ptm;
