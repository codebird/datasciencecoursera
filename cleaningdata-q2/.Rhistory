attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
exit
quit
quit()
z = 123;
t <- function(x, y){
x*y/z
}
t(123, 1)
makeCacheMatrix <- function(x = matrix()){
inverse <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...){
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
my_matrix <- makeCacheMatrix(matrix(rnorm(9), 3, 3))
my_matrix$get()
cacheSolve(my_matrix)
my_matrix$getinverse()
x$getinverse()
my_matrix$getinverse()
makeCacheMatrix <- function(x = matrix()){
inverse <- NULL
set <- function(y){
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inv) inverse <<- inv
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
my_matrix <- makeCacheMatrix(matrix(rnorm(9), 3, 3))
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$getinverse()
makeCacheMatrix <- function(x = matrix()){
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
my_matrix <- makeCacheMatrix(matrix(rnorm(9), 3, 3))
my_matrix$getinverse()
library('swirl')
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
mydf <- read.csv(path2csv, stringAsFactors=FALSE)
mydf <- read.csv(path2csv, stringSAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
exists()
swirl()
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -(X:size))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<"3.0.2", country=="IN")
filter(cran, r_version <= "3.0.2", country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran, size > 100500 & r_os == "linux=gnu")
filter(cran, size > 100500, r_os == "linux=gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package, mean(size))
submit()
submit()
pack_sum(by_package)
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count>=679)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, 99%)
quantile(pack_sum$unique, prob=0.99)
top_unique <- filter(pack_sum, unique > 465)
View(pack_sum)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
install.packages()
install.packages(httr)
install.packages('httr')
library(httr)
?get
?GET
github <- oauth_app("e859504a2b582d3eae0c", "8ed656d062b24343ea01241ce7be00d87a553b85")
github_token <- oauth_zero_leg_token(github)
github <- oauth_app("e859504a2b582d3eae0c", "8ed656d062b24343ea01241ce7be00d87a553b85")
myapp <- oauth_app("github",
key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85a"
)
# 3. Get OAuth credentials
git_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",
key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85a"
)
myapp
git_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
git_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
git_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",
key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85a"
)
git_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
git_token <- oauth1.0_token('https://github.com/login/oauth/authorize', myapp)
git_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
git_token <- oauth1.0_token("https://github.com/login/oauth/authorize", myapp)
git_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
git_token <- oauth1.0_token("https://github.com/login/oauth/authorize", myapp)
git_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85a"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85a"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages('httpuv')
library('httpuv')
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
getwd()
setwd('/home/hmallah/coursera/da-jh/datasciencecoursera/cleaningdata-q2')
source('q2.R')
source('q2.R')
source('q2.R')
source('q2.R')
source('q2.R')
source('q2.R')
source('q2.R')
source('q2.R')
source('q2.R')
e859504a2b582d3eae0c
# create
myapp <- oauth_app("github",
key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85a"
)
# set github return url to http://127.0.0.1:1410
# load httr lib
library(httr)
# search for github endpoints
oauth_endpoints("github")
# create
myapp <- oauth_app("github",
key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85a"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
source('q2.R')
# set github return url to http://127.0.0.1:1410
# load httr lib
library(httr)
# search for github endpoints
oauth_endpoints("github")
# create
myapp <- oauth_app("github",
key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85a"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# set github return url to http://127.0.0.1:1410
# load httr lib
library(httr)
# search for github endpoints
oauth_endpoints("github")
# create
myapp <- oauth_app("github",
key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85a"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85a"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# set github return url to http://127.0.0.1:1410
# load httr lib
library(httr)
# search for github endpoints
oauth_endpoints("github")
# create
myapp <- oauth_app("github",
key = "Iv1.12afb66b616b7759",
secret = "ded3c76172afb47d9190a9c68f2882b62935f504"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# set github return url to http://127.0.0.1:1410
# load httr lib
library(httr)
# search for github endpoints
oauth_endpoints("github")
# create
myapp <- oauth_app("github", key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
content(req)
install.packages('rjson')
?fromJSON
# set github return url to http://127.0.0.1:1410
# load httr lib
library(httr)
# search for github endpoints
oauth_endpoints("github")
# create
myapp <- oauth_app("github", key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
data <- fromJSON(content(req))
# set github return url to http://127.0.0.1:1410
# load httr lib
library(httr)
library(rjson)
library(httpuv)
# search for github endpoints
oauth_endpoints("github")
# create
myapp <- oauth_app("github", key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
data <- fromJSON(content(req))
# set github return url to http://127.0.0.1:1410
# load httr lib
library(httr)
library(rjson)
library(httpuv)
# search for github endpoints
oauth_endpoints("github")
# create
myapp <- oauth_app("github", key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
data[1]
# set github return url to http://127.0.0.1:1410
# load httr lib
library(httr)
library(rjson)
library(httpuv)
# search for github endpoints
oauth_endpoints("github")
# create
myapp <- oauth_app("github", key = "e859504a2b582d3eae0c",
secret = "8ed656d062b24343ea01241ce7be00d87a553b85"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
data <- content(req)
data
data[1]
data[2]
data[2]$name
data[1]$name
data[[1]]$name
data[[2]]$name
data[[3]]$name
dimd(data)
dim(data)
len(data)
lengh(data)
length(data)
for(i %in% c(0:30)){}
for(i %in% c(0:30)){ }
for(i %in% c(0:30)){
for(i in c(0:30)){
if(data[[i]]$name == "datasharing"){
print(data[[i]]);
}
}
for(i in c(0:30)){
print(i)
}
for(i in c(0:30)){
print(data[[i]])
}
for(i in c(0:30)){
print(data[[1]])
}
for(i in c(0:30)){
print(data[[iL]])
}
for(i in c(0:30)){
print(data[[as.integer(i)]])
}
for(i in c(0:30)){
print(data[[as.integer(i)]]$name)
}
for(i in c(1:length(data))){
if(data[[i]]$name == "datasharing"){
print(data[[i]]);
}
}
for(i in c(1:length(data))){
if(data[[i]]$name == "datasharing"){
print(data[[i]]$created_at);
}
}
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', destfile = "datasspid.csv")
acs = data.frame(read.csv('datasspid.csv'))
sqldf("select distinct AGEP from acs")
install.packages(sqldf)
install.packages('sqldf')
library(sqldf)
sqldf("select distinct AGEP from acs")
sqldf("select pwgtp1 from acs where AGEP < 50")
library(XML)
html <- getUrl('http://biostat.jhsph.edu/~jleek/contact.html')
html <- getURL('http://biostat.jhsph.edu/~jleek/contact.html')
html <- readHTMLTable('http://biostat.jhsph.edu/~jleek/contact.html')
html
html <- get('http://biostat.jhsph.edu/~jleek/contact.html')
html = htmlTreeParse('http://apiolaza.net/babel.html',
useInternal = TRUE)
html = htmlTreeParse('http://biostat.jhsph.edu/~jleek/contact.html',
useInternal = TRUE)
html
html[[1]]
html <- readlines('http://biostat.jhsph.edu/~jleek/contact.html')
html = readLines('http://biostat.jhsph.edu/~jleek/contact.html')
html
nchar(html[10])
nchar(html[20])
nchar(html[30])
nchar(html[100])
data = read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"))
data = read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4)))
data = read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
data
data['V4']
sum(data['V4'])
data = read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip=4,
widths=c(13, 6, 4, 9, 4, 9, 4, 9, 4)))
data = read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip=4,
widths=c(13, 6, 4, 9, 4, 9, 4, 9, 4))
data['v4']
data
data['V4']
sum(data['V4'])
exit
